function is_efi {
	if [ "${grub_platform}" = "efi" ]; then
		return 0
	fi
return 1
}

function efi_detect {
	if ! is_efi ; then
		return
	fi

	submenu --class=find.efi --hotkey=f "Detect EFI bootloaders" {
		for efi in (*,*)/efi/*/*.efi (*,*)/efi/*/*/*.efi (*,*)/*.efi (*,*)/*/*.efi ; do
			regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
			if [ -e "${efi}" ]; then
				regexp --set=1:efi_name '/([A-Za-z]+)((x||aa)64|ia32)?\.efi$' "${efi}"
				tr -s efi_name_d -D "${efi_name}"
				regexp --set=1:efi_base '/(\w+)/[A-Za-z]+((x||aa)64|ia32)?\.efi$' "${efi}"
				tr -s os_class -D "${efi_base}"
				os_name=""
				if [ "${efi_name_d}" == "mm" -o "${efi_name_d}" == "fb" -o "${efi_name_d}" == "bootmgr" ]; then
					continue
				elif [ "${efi_name_d}" == "bootmgfw" ]; then
					os_name=Windows
					os_class=windows
				elif [ "${efi_name_d}" == "opencore" ]; then
					os_name=OpenCore
					os_class=macosx
				elif [ "${efi_name_d}" == "clover" ]; then
					os_name=Clover
					os_class=macosx
				elif [ "${efi_name_d}" == "memtest" ]; then
					os_name=memtest
					os_class=memtest
				elif [ -n "${os_class}" -a "${os_class}" != "boot" -a "${os_class}" != "efi" ]; then
					os_name=${efi_base}
				else
					os_class=efi
				fi
				if [ -z "${os_name}" ]; then
					os_name=${efi}
				else
					os_name="(${efi_device}) ${os_name}"
					if [ "${efi_name}" == "shim" ]; then
						os_name="${os_name} (${efi_name})"
					fi
				fi
				menuentry --class "${os_class}" --class unknown "${os_name}" "${efi_device}" "${efi}" {
					root="${2}"
					chainloader "${3}"
				}
			fi
		done
		menuentry --hotkey=q --class cancel "Cancel" {menu_reload}
	}
}

function memtest_detect {
	if ! is_efi ; then
		return
	fi

	if [ -f /boot/memtest ]; then
		menuentry --class=memtest --hotkey=m "Memory Test" {linux16 /boot/$1}
	fi
}

function toggle_pcmode {
	if [ -z "$pcmode" ]; then
		set pcmode_title="Enable PC_MODE"
		set pcmode_next="PC_MODE=1"
	else
		set pcmode_title="Disable PC_MODE"
		set pcmode_next=""
	fi
	export pcmode_title
	export pcmode_next
	submenu --class driver --class="toggle_pcmode" "$pcmode_title" {
		set pcmode="$pcmode_next"
		export pcmode
		normal
	}
}

function toggle_ffmpeg {
	if [ -z "$ffmpeg" ]; then
		set ffmpeg_title="Enable FFMPEG"
		set ffmpeg_next="FFMPEG_CODEC=1 FFMPEG_PREFER_C2=1"
	else
		set ffmpeg_title="Disable FFMPEG"
		set ffmpeg_next=""
	fi
	export ffmpeg_title
	export ffmpeg_next
	submenu --class driver --class="toggle_ffmpeg" "$ffmpeg_title" {
		set ffmpeg="$ffmpeg_next"
		export ffmpeg
		normal
	}
}

function toggle_setupwizard {
	if [ -z "$setupwizard" ]; then
		set setupwizard_title="Disable Setup Wizard"
		set setupwizard_next="SETUPWIZARD=0"
	else
		set setupwizard_title="Enable Setup Wizard"
		set setupwizard_next=""
	fi
	export setupwizard_title
	export setupwizard_next
	submenu --class driver --class="toggle_setupwizard" "$setupwizard_title" {
		set setupwizard="$setupwizard_next"
		export setupwizard
		normal
	}
}

function toggle_hwaccel {
	if [ -z "$hwaccel" ]; then
		set hwaccel_title="Disable Hardware Acceleration"
		set hwaccel_next="nomodeset HWACCEL=0"
	else
		set hwaccel_title="Enable Hardware Acceleration"
		set hwaccel_next=""
	fi
	export hwaccel_title
	export hwaccel_next
	submenu --class driver --class="toggle_hwaccel" "$hwaccel_title" {
		set hwaccel="$hwaccel_next"
		export hwaccel
		normal
	}
}

function toggle_copytoram {
	if [ -z "$copytoram" ]; then
		set copytoram_title="Enable Copy to RAM"
		set copytoram_next="COPYTORAM=1"
	else
		set copytoram_title="Disable Copy to RAM"
		set copytoram_next=""
	fi
	export copytoram_title
	export copytoram_next
	submenu --class driver --class="toggle_copytoram" "$copytoram_title" {
		set copytoram="$copytoram_next"
		export copytoram
		normal
	}
}

function add_entry {
	title="$1 $TITLE"
	shift
	menuentry --class blissos "$title" "$@" {
		linux "${KERNEL}" $KERNEL_ARGS "$2" "$pcmode" "$ffmpeg" "$hwacccel" "$setupwizard" "$copytoram" "$iso"
		initrd "${INITRD}"
	}
}

function power_options {
	submenu --class power --class shutdown "Power options" {
		if is_efi; then
			menuentry --class efi "UEFI firmware settings" { fwsetup }
		fi
		menuentry --class restart "Reboot" { reboot }
		menuentry --class shutdown "Poweroff" { halt }
	}
}

function load_theme {
	set gfxmode=1024x768,1920x1080,auto
  terminal_output gfxterm
	for font in $prefix/themes/*/*.pf2; do
		loadfont $font
	done
	for theme in $prefix/themes/*/theme.txt; do
    export theme
	done
}
